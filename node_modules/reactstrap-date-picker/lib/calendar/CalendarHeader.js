"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarHeader = CalendarHeader;

var _react = _interopRequireWildcard(require("react"));

var _compareMonths = require("../util/compareMonths");

var _PickMonthDefault = _interopRequireDefault(require("./pickmonth/PickMonthDefault"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function CalendarHeader(_ref) {
  var {
    previousButtonElement,
    nextButtonElement,
    pickMonthElement,
    displayDate,
    minDate,
    maxDate,
    onChange,
    monthLabels
  } = _ref;
  var [displayingMinMonth, setDisplayingMinMonth] = (0, _react.useState)(false);
  var [displayingMaxMonth, setDisplayingMaxMonth] = (0, _react.useState)(false);
  var [title, setTitle] = (0, _react.useState)('');
  var PickMonthElement = pickMonthElement;
  (0, _react.useEffect)(() => {
    if (displayDate == undefined) {
      return;
    }

    if (!minDate) {
      setDisplayingMinMonth(false);
    } else {
      setDisplayingMinMonth((0, _compareMonths.compareMonths)(displayDate, minDate));
    }

    if (!maxDate) {
      setDisplayingMaxMonth(false);
    } else {
      setDisplayingMaxMonth((0, _compareMonths.compareMonths)(displayDate, maxDate));
    }

    try {
      if (monthLabels) {
        setTitle("".concat(monthLabels[displayDate.getMonth()], " ").concat(displayDate.getFullYear()));
      }
    } catch (e) {
      console.error(e);
    }
  }, [displayDate, minDate, maxDate, monthLabels]);

  var handleChangeMonthIncr = inc => {
    var newDisplayDate = new Date(displayDate);
    newDisplayDate.setMonth(newDisplayDate.getMonth() + inc, 1);
    onChange(newDisplayDate);
  };

  var handleChangeMonth = m => {
    var newDisplayDate = new Date(displayDate);
    newDisplayDate.setMonth(m);
    onChange(newDisplayDate);
  };

  var handleChangeYear = y => {
    var newDisplayDate = new Date(displayDate);
    newDisplayDate.setFullYear(y);
    onChange(newDisplayDate);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "rdp-header text-center",
    style: {
      display: 'flex',
      flexFlow: 'row',
      flexWrap: 'nowrap'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "text-muted rdp-header-previous-wrapper",
    onClick: () => handleChangeMonthIncr(-1),
    style: {
      cursor: 'pointer',
      userSelect: 'none',
      flexBasis: '1.25em',
      alignSelf: 'center'
    }
  }, displayingMinMonth ? null : previousButtonElement), /*#__PURE__*/_react.default.createElement("div", {
    className: "rdp-header-pick-month-wrapper",
    style: {
      flex: '1 1 auto'
    }
  }, PickMonthElement == null || PickMonthElement === 'none' ? /*#__PURE__*/_react.default.createElement("div", null, title) : PickMonthElement === 'default' ? /*#__PURE__*/_react.default.createElement(_PickMonthDefault.default, {
    displayDate: displayDate,
    monthLabels: monthLabels,
    minDate: minDate,
    maxDate: maxDate,
    onChangeMonth: m => handleChangeMonth(m),
    onChangeYear: y => handleChangeYear(y)
  }) : /*#__PURE__*/_react.default.createElement(PickMonthElement, {
    displayDate: displayDate,
    minDate: minDate,
    maxDate: maxDate,
    onChangeMonth: m => handleChangeMonth(m),
    onChangeYear: y => handleChangeYear(y)
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "text-muted rdp-header-next-wrapper",
    onClick: () => handleChangeMonthIncr(+1),
    style: {
      cursor: 'pointer',
      userSelect: 'none',
      flexBasis: '1.25em',
      alignSelf: 'center'
    }
  }, displayingMaxMonth ? null : nextButtonElement));
}