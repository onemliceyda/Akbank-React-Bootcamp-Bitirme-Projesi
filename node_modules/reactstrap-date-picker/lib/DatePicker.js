"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useCheckProps = require("./util/useCheckProps");

var _InputGroup = require("./input/InputGroup");

var _InputOverlay = require("./input/InputOverlay");

var _InputHidden = require("./input/InputHidden");

var _InputClearButton = require("./input/InputClearButton");

var _InputControlInput = require("./input/InputControlInput");

var _useInputValues = require("./input/useInputValues");

var _useInputIds = require("./input/useInputIds");

var _useDayLabels = require("./input/useDayLabels");

var _Calendar = require("./calendar/Calendar");

var _useCalendarProps = require("./calendar/useCalendarProps");

var _props = require("./props");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _DatePicker(props, ref) {
  var {
    value,
    defaultValue,
    dateFormat,
    weekStartsOn,
    minDate,
    maxDate,
    onChange,
    onFocus,
    onBlur,
    onClear,
    onInvalid,
    id,
    name,
    required,
    placeholder,
    inputRef,
    noValidate,
    valid,
    invalid,
    customInputGroup,
    style,
    className,
    autoComplete,
    autoFocus,
    disabled,
    size,
    customControl,
    showClearButton,
    clearButtonElement,
    previousButtonElement,
    nextButtonElement,
    pickMonthElement,
    cellPadding,
    roundedCorners,
    dayLabels,
    monthLabels,
    calendarPlacement,
    calendarContainer,
    showWeeks,
    showTodayButton,
    todayButtonLabel,
    children
  } = props;
  var propError = (0, _useCheckProps.useCheckProps)(value, defaultValue);

  if (propError != undefined) {
    throw new Error(propError);
  }

  var [hiddenInputRef, overlayContainerRef, controlInputRef, open, placement, handleFocus, handleBlur] = (0, _useCalendarProps.useCalendarProps)(calendarPlacement, inputRef, autoFocus, onBlur, onFocus);
  var [innerValue, inputValue, displayDate, selectedDate, handleClear, handleInputChange, handleChangeMonth, handleChangeDate] = (0, _useInputValues.useInputValues)(controlInputRef, value, defaultValue, minDate, maxDate, dateFormat, onClear, onChange);
  var [groupInputId, hiddenInputId, controlInputId] = (0, _useInputIds.useInputIds)(id, name, customControl);
  (0, _react.useImperativeHandle)(ref, () => ({
    getValue: () => {
      return selectedDate ? selectedDate.toISOString() : null;
    },
    getFormattedValue: () => {
      return displayDate ? inputValue : null;
    },
    getNode: () => controlInputRef === null || controlInputRef === void 0 ? void 0 : controlInputRef.current
  }));
  var fixedDayLabels = (0, _useDayLabels.useFixedDayLabels)(dayLabels, weekStartsOn);

  var handleChangeDateAndBlur = nSelectedDate => {
    handleChangeDate(nSelectedDate);
    handleBlur(true);
  };

  return /*#__PURE__*/_react.default.createElement(_InputGroup.InputGroup, {
    customInputGroup: customInputGroup,
    size: size,
    inputId: groupInputId
  }, /*#__PURE__*/_react.default.createElement(_InputControlInput.InputControlInput, {
    controlId: controlInputId,
    customControl: customControl,
    value: inputValue || '',
    required: required,
    placeholder: placeholder || '',
    inputRef: controlInputRef,
    disabled: disabled,
    className: className,
    style: style,
    autoFocus: autoFocus,
    autoComplete: autoComplete,
    onInvalid: onInvalid,
    noValidate: noValidate,
    valid: valid,
    invalid: invalid,
    onFocus: () => handleFocus(),
    onBlur: e => {
      var _e$data;

      return handleBlur((e === null || e === void 0 ? void 0 : (_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.rdp_close_calendar) || false);
    },
    onChange: () => handleInputChange()
  }), /*#__PURE__*/_react.default.createElement(_Calendar.Calendar, {
    placement: placement,
    open: open,
    container: calendarContainer || overlayContainerRef.current,
    target: controlInputId,
    previousButtonElement: previousButtonElement,
    nextButtonElement: nextButtonElement,
    pickMonthElement: pickMonthElement,
    displayDate: displayDate,
    minDate: minDate,
    maxDate: maxDate,
    onChangeMonth: newDisplayDate => handleChangeMonth(newDisplayDate),
    monthLabels: monthLabels,
    cellPadding: cellPadding,
    selectedDate: selectedDate,
    onChange: newSelectedDate => handleChangeDateAndBlur(newSelectedDate),
    dayLabels: fixedDayLabels,
    weekStartsOn: weekStartsOn,
    showTodayButton: showTodayButton,
    todayButtonLabel: todayButtonLabel,
    roundedCorners: roundedCorners,
    showWeeks: showWeeks
  }), /*#__PURE__*/_react.default.createElement(_InputOverlay.InputOverlay, {
    overlayContainerRef: overlayContainerRef
  }), /*#__PURE__*/_react.default.createElement(_InputHidden.InputHidden, {
    inputId: hiddenInputId,
    name: name,
    value: innerValue || '',
    formattedValue: innerValue ? inputValue : '',
    hiddenInputRef: hiddenInputRef
  }), showClearButton && !customControl ? /*#__PURE__*/_react.default.createElement(_InputClearButton.InputClearButton, {
    inputValue: inputValue,
    disabled: disabled,
    clearButtonElement: clearButtonElement,
    onClick: () => handleClear()
  }) : null, children);
}

var DatePicker = /*#__PURE__*/(0, _react.forwardRef)(_DatePicker);
exports.DatePicker = DatePicker;
DatePicker.propTypes = _props.datePickerProps;
DatePicker.defaultProps = _props.datePickerDefaulProps;