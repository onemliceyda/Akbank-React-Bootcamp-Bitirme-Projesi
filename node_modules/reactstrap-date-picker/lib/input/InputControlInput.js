"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputControlInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactstrap = require("reactstrap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputControlInput = _ref => {
  var {
    customControl,
    controlId,
    value,
    required,
    placeholder,
    inputRef,
    disabled,
    className,
    style,
    autoFocus,
    autoComplete,
    valid,
    invalid,
    onInvalid,
    noValidate,
    onKeyDown,
    onFocus,
    onBlur,
    onChange
  } = _ref;
  var validityClassNames = "".concat(invalid === true ? 'is-invalid' : '', " ").concat(valid === true ? 'is-valid' : '');

  if (customControl != undefined) {
    return /*#__PURE__*/_react.default.cloneElement(customControl, {
      id: controlId,
      value: value || '',
      required: required,
      placeholder: placeholder,
      ref: inputRef,
      disabled: disabled,
      className: "rdp-form-control ".concat(className || '', " ").concat(customControl.props.className || '', " ").concat(validityClassNames),
      style: _objectSpread(_objectSpread({}, customControl.props.style || {}), style || {}),
      autoComplete: autoComplete,
      onInvalid: onInvalid,
      noValidate: noValidate,
      onKeyDown: onKeyDown,
      onFocus: onFocus,
      onBlur: onBlur,
      onChange: onChange
    });
  }

  return /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
    id: controlId,
    name: controlId,
    value: value || '',
    required: required,
    placeholder: placeholder,
    innerRef: inputRef,
    disabled: disabled,
    type: "text",
    className: "rdp-form-control ".concat(className || '', " ").concat(validityClassNames),
    style: style,
    autoFocus: autoFocus,
    autoComplete: autoComplete,
    onInvalid: onInvalid,
    noValidate: noValidate,
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: onChange
  });
};

exports.InputControlInput = InputControlInput;